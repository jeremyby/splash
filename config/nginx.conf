
worker_processes  2;

error_log  /var/www/splash/tmp/error.log  crit;

events {
  use                 epoll;
  worker_connections  1024;
  
  # set to on if you have more than 1 worker_processes 
  accept_mutex on;
}


http {
  client_max_body_size      5m;
  client_body_buffer_size   128k;
  client_body_temp_path     /tmp/client_body_temp;

  include       mime.types;
  default_type  application/octet-stream;

  sendfile       on;
  tcp_nopush     on;

  keepalive_timeout  70;
  
  gzip                      on;
  gzip_http_version         1.1;
  gzip_disable              "MSIE [1-6]\.(?!.*SV1)";
  gzip_vary                 on;
  gzip_min_length           500;
  gzip_buffers              64 8k;
  gzip_comp_level           3;
  gzip_proxied              any;
  gzip_types                text/plain text/xml text/css text/comma-separated-values text/javascript application/x-javascript application/atom+xml image/x-icon;
  
  # this can be any application server, not just Unicorn/Rainbows!
  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    # for UNIX domain socket setups:
    server unix:/var/www/splash/tmp/unicorn.sock fail_timeout=0;

    # for TCP setups, point these to your backend servers
    # server 192.168.0.7:8080 fail_timeout=0;
    # server 192.168.0.8:8080 fail_timeout=0;
    # server 192.168.0.9:8080 fail_timeout=0;
  }

  server {
    listen       80;
    server_name  contr.ee;
    root /var/www/splash/public;
    
    # this rewrites all the requests to the maintenance.html
    # page if it exists in the doc root. This is for capistrano's
    # disable web task
    if (-f $document_root/maintenance.html) {
      rewrite  ^(.*)$  /maintenance.html last;
      break;
    }
    
    if ($request_method !~ ^(GET|HEAD|PUT|POST|DELETE|OPTIONS)$ ){
	    return 405;
    }
    
    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;

      # If the file exists as a static file serve it directly without
      # running all the other rewite tests on it
      if (-f $request_filename) {
        break;
      }

      # this is the meat of the rack page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewite the url to have explicit .html on the end
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the
      # necessary headers and proxies to our upstream mongrels
      if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
      }

      if (!-f $request_filename) {
        proxy_pass http://app_server;
        break;
      }
    }

    location = /favicon.ico {
  		expires    max;
  		add_header Cache-Control public;
	  }
    
    error_page   500 502 503 504  /500.html;
  }


  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  #server {
  #    listen       8000;
  #    listen       somename:8080;
  #    server_name  somename  alias  another.alias;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}


  # HTTPS server
  #
  #server {
  #    listen       443;
  #    server_name  localhost;

  #    ssl                  on;
  #    ssl_certificate      cert.pem;
  #    ssl_certificate_key  cert.key;

  #    ssl_session_timeout  5m;

  #    ssl_protocols  SSLv2 SSLv3 TLSv1;
  #    ssl_ciphers  HIGH:!aNULL:!MD5;
  #    ssl_prefer_server_ciphers   on;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}

}
